'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
exports.createStreamer = void 0;
const client_s3_1 = require('@aws-sdk/client-s3');
const lib_dynamodb_1 = require('@aws-sdk/lib-dynamodb');
const ulid_1 = require('ulid');
function createStreamer(s3Client, dynamoClient, config) {
  const ulid = (0, ulid_1.monotonicFactory)();
  const tableName = config.tables.streams;
  const bucketName = config.streamBucket;
  const genChunkId = () => `chnk_${ulid()}`;
  return {
    async writeToStream(name, chunk) {
      const chunkId = genChunkId();
      const s3Key = `${name}/${chunkId}`;
      // Upload chunk data to S3
      const buffer =
        typeof chunk === 'string' ? Buffer.from(chunk) : Buffer.from(chunk);
      await s3Client.send(
        new client_s3_1.PutObjectCommand({
          Bucket: bucketName,
          Key: s3Key,
          Body: buffer,
          ContentType: 'application/octet-stream',
        })
      );
      // Store metadata in DynamoDB
      const streamChunk = {
        streamId: name,
        chunkId,
        s3Key,
        eof: false,
        createdAt: new Date().toISOString(),
      };
      await dynamoClient.send(
        new lib_dynamodb_1.PutCommand({
          TableName: tableName,
          Item: streamChunk,
        })
      );
    },
    async closeStream(name) {
      const chunkId = genChunkId();
      const s3Key = `${name}/${chunkId}`;
      // Upload empty chunk to mark EOF
      await s3Client.send(
        new client_s3_1.PutObjectCommand({
          Bucket: bucketName,
          Key: s3Key,
          Body: Buffer.from([]),
          ContentType: 'application/octet-stream',
        })
      );
      // Store EOF marker in DynamoDB
      const streamChunk = {
        streamId: name,
        chunkId,
        s3Key,
        eof: true,
        createdAt: new Date().toISOString(),
      };
      await dynamoClient.send(
        new lib_dynamodb_1.PutCommand({
          TableName: tableName,
          Item: streamChunk,
        })
      );
    },
    async readFromStream(name, startIndex) {
      return new ReadableStream({
        async start(controller) {
          let offset = startIndex ?? 0;
          let hasMore = true;
          let lastEvaluatedKey;
          while (hasMore) {
            // Query DynamoDB for chunks
            const result = await dynamoClient.send(
              new lib_dynamodb_1.QueryCommand({
                TableName: tableName,
                KeyConditionExpression: 'streamId = :streamId',
                ExpressionAttributeValues: {
                  ':streamId': name,
                },
                ExclusiveStartKey: lastEvaluatedKey,
                ScanIndexForward: true, // Sort by chunkId ascending
              })
            );
            if (!result.Items || result.Items.length === 0) {
              // No more chunks yet - in a real implementation, you might want to poll
              break;
            }
            for (const item of result.Items) {
              if (offset > 0) {
                offset--;
                continue;
              }
              // Fetch chunk data from S3
              try {
                const s3Response = await s3Client.send(
                  new client_s3_1.GetObjectCommand({
                    Bucket: bucketName,
                    Key: item.s3Key,
                  })
                );
                if (s3Response.Body) {
                  const bytes = await s3Response.Body.transformToByteArray();
                  if (bytes.length > 0) {
                    controller.enqueue(bytes);
                  }
                }
                if (item.eof) {
                  controller.close();
                  return;
                }
              } catch (error) {
                console.error(`Error reading chunk ${item.chunkId}:`, error);
                controller.error(error);
                return;
              }
            }
            lastEvaluatedKey = result.LastEvaluatedKey;
            hasMore = !!lastEvaluatedKey;
          }
          // If we get here and haven't closed, check if we should wait for more data
          // In a production implementation, you'd want to implement polling or websocket updates
          controller.close();
        },
      });
    },
  };
}
exports.createStreamer = createStreamer;
//# sourceMappingURL=data:application/json;base64,
