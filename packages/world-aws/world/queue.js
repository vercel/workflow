'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
exports.createQueue = void 0;
const client_sqs_1 = require('@aws-sdk/client-sqs');
const queue_1 = require('@vercel/queue');
const world_1 = require('@workflow/world');
const world_local_1 = require('@workflow/world-local');
const ulid_1 = require('ulid');
function parseQueueName(queueName) {
  const [prefix, queueId] = queueName.split('_');
  return [prefix, queueId];
}
function createQueue(client, config) {
  const port = process.env.PORT ? Number(process.env.PORT) : undefined;
  const embeddedWorld = (0, world_local_1.createEmbeddedWorld)({
    dataDir: undefined,
    port,
  });
  const transport = new queue_1.JsonTransport();
  const generateMessageId = (0, ulid_1.monotonicFactory)();
  const Queues = {
    __wkf_workflow_: config.queues.workflow,
    __wkf_step_: config.queues.step,
  };
  const createQueueHandler = embeddedWorld.createQueueHandler;
  const getDeploymentId = async () => {
    return 'aws';
  };
  const queue = async (queue, message, opts) => {
    const [prefix, queueId] = parseQueueName(queue);
    const queueUrl = Queues[prefix];
    const body = transport.serialize(message);
    const messageId = world_1.MessageId.parse(`msg_${generateMessageId()}`);
    await client.send(
      new client_sqs_1.SendMessageCommand({
        QueueUrl: queueUrl,
        MessageBody: JSON.stringify({
          id: queueId,
          data: body,
          attempt: 1,
          messageId,
          idempotencyKey: opts?.idempotencyKey,
        }),
        MessageDeduplicationId: opts?.idempotencyKey ?? messageId,
        MessageGroupId: queueId, // For FIFO queues
      })
    );
    return { messageId };
  };
  let isStarted = false;
  let shouldStop = false;
  async function pollQueue(queueUrl, queuePrefix) {
    while (!shouldStop) {
      try {
        const response = await client.send(
          new client_sqs_1.ReceiveMessageCommand({
            QueueUrl: queueUrl,
            MaxNumberOfMessages: 1,
            WaitTimeSeconds: 20, // Long polling
            VisibilityTimeout: 300, // 5 minutes
          })
        );
        if (!response.Messages || response.Messages.length === 0) {
          continue;
        }
        for (const message of response.Messages) {
          if (!message.Body || !message.ReceiptHandle) continue;
          try {
            const body = JSON.parse(message.Body);
            const payload = world_1.QueuePayloadSchema.parse(
              transport.deserialize(body.data)
            );
            // Create a queue name to pass to the embedded world
            const queueName = `${queuePrefix}${body.id}`;
            // Use the embedded world's queue handler
            const handler = createQueueHandler(
              queuePrefix,
              async (msg, meta) => {
                // The embedded world will handle the actual workflow/step execution
              }
            );
            // Make an HTTP request to the embedded world
            const request = new Request(
              `http://localhost:${port || 3000}/.well-known/workflow/v1/${queuePrefix === '__wkf_workflow_' ? 'flow' : 'step'}`,
              {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  message: payload,
                  meta: {
                    attempt: body.attempt || 1,
                    queueName,
                    messageId: body.messageId,
                  },
                }),
              }
            );
            const response = await handler(request);
            if (response.status === 200) {
              // Delete message from queue on success
              await client.send(
                new client_sqs_1.DeleteMessageCommand({
                  QueueUrl: queueUrl,
                  ReceiptHandle: message.ReceiptHandle,
                })
              );
            } else {
              // Message will become visible again after visibility timeout
              console.error(`Queue handler returned status ${response.status}`);
            }
          } catch (error) {
            console.error('Error processing message:', error);
            // Message will become visible again after visibility timeout
          }
        }
      } catch (error) {
        console.error('Error polling queue:', error);
        // Wait a bit before retrying
        await new Promise((resolve) => setTimeout(resolve, 5000));
      }
    }
  }
  async function start() {
    if (isStarted) return;
    isStarted = true;
    shouldStop = false;
    // Start polling both queues
    Promise.all([
      pollQueue(Queues.__wkf_workflow_, '__wkf_workflow_'),
      pollQueue(Queues.__wkf_step_, '__wkf_step_'),
    ]).catch((error) => {
      console.error('Queue polling error:', error);
    });
  }
  return {
    getDeploymentId,
    queue,
    createQueueHandler,
    start,
  };
}
exports.createQueue = createQueue;
//# sourceMappingURL=data:application/json;base64,
