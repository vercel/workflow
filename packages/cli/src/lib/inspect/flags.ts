import { Flags } from '@oclif/core';

export const cliFlags = {
  verbose: Flags.boolean({
    description: 'Verbose output',
    required: false,
    char: 'v',
    helpGroup: 'Output',
    helpLabel: '-v, --verbose',
    env: 'DEBUG',
    default: false,
  }),
  json: Flags.boolean({
    description: 'output JSON instead of human-readable tables/streams',
    required: false,
    char: 'j',
    default: false,
    helpGroup: 'Output',
    helpLabel: '-j, --json',
  }),
  cursor: Flags.string({
    description: 'pagination cursor for list commands',
    required: false,
    default: '',
    helpGroup: 'Filtering',
    helpLabel: '--cursor',
    helpValue: 'CURSOR',
  }),
  backend: Flags.string({
    description: 'backend to inspect',
    required: false,
    char: 'b',
    default: 'embedded',
    env: 'WORKFLOW_TARGET_WORLD',
    helpGroup: 'Target',
    helpLabel: '-b, --backend',
    helpValue: ['embedded', 'vercel', '<your-package-name>'],
    defaultHelp: 'embedded',
  }),
  authToken: Flags.string({
    description:
      'Authentication token to be passed to the backend. If not provided and the backend is vercel, will fall back to the token generated by `vc login`.',
    required: false,
    char: 'a',
    dependsOn: ['backend'],
    default: '',
    env: 'WORKFLOW_VERCEL_AUTH_TOKEN',
    helpGroup: 'Target',
    helpLabel: '-a, --authToken',
    helpValue: 'TOKEN',
  }),
  project: Flags.string({
    description:
      'If backend is vercel, the vercel project to authenticate against',
    required: false,
    default: '',
    dependsOn: ['backend'],
    env: 'WORKFLOW_VERCEL_PROJECT',
    helpGroup: 'Target',
    helpLabel: '--project',
    helpValue: 'PROJECT',
  }),
  team: Flags.string({
    description:
      'If backend is vercel, the vercel team to authenticate against',
    required: false,
    dependsOn: ['backend'],
    default: '',
    env: 'WORKFLOW_VERCEL_TEAM',
    helpGroup: 'Target',
    helpLabel: '--team',
    helpValue: 'TEAM',
  }),
  env: Flags.string({
    description: 'If backend is vercel, the vercel environment to use',
    required: false,
    options: ['production', 'preview'],
    default: 'production',
    char: 'e',
    dependsOn: ['backend'],
    env: 'WORKFLOW_VERCEL_ENV',
    helpGroup: 'Target',
    helpLabel: '-e, --env',
    helpValue: ['production', 'preview'],
    defaultHelp: 'production',
  }),
  web: Flags.boolean({
    description: 'Open the web UI instead of displaying in terminal',
    required: false,
    char: 'w',
    default: false,
    helpGroup: 'Output',
    helpLabel: '-w, --web',
  }),
  noBrowser: Flags.boolean({
    description: 'Disable automatic browser opening when launching web UI',
    required: false,
    default: false,
    env: 'WORKFLOW_DISABLE_BROWSER_OPEN',
    helpGroup: 'Output',
    helpLabel: '--no-browser',
  }),
  sort: Flags.string({
    description: 'sort order for list commands',
    required: false,
    options: ['asc', 'desc'],
    default: 'desc',
    helpGroup: 'Filtering',
    helpLabel: '--sort',
    helpValue: ['asc', 'desc'],
    defaultHelp: 'desc',
  }),
  limit: Flags.integer({
    description: 'number of items to return per page',
    required: false,
    default: 20,
    helpGroup: 'Filtering',
    helpLabel: '--limit',
    helpValue: 'NUMBER',
  }),
};
