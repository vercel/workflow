/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as IndexRouteImport } from './routes/index';
import { Route as ApiTriggerRouteImport } from './routes/api/trigger';
import { Route as ApiSignupRouteImport } from './routes/api/signup';
import { Route as ApiHookRouteImport } from './routes/api/hook';

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const ApiTriggerRoute = ApiTriggerRouteImport.update({
  id: '/api/trigger',
  path: '/api/trigger',
  getParentRoute: () => rootRouteImport,
} as any);
const ApiSignupRoute = ApiSignupRouteImport.update({
  id: '/api/signup',
  path: '/api/signup',
  getParentRoute: () => rootRouteImport,
} as any);
const ApiHookRoute = ApiHookRouteImport.update({
  id: '/api/hook',
  path: '/api/hook',
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/api/hook': typeof ApiHookRoute;
  '/api/signup': typeof ApiSignupRoute;
  '/api/trigger': typeof ApiTriggerRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/api/hook': typeof ApiHookRoute;
  '/api/signup': typeof ApiSignupRoute;
  '/api/trigger': typeof ApiTriggerRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/api/hook': typeof ApiHookRoute;
  '/api/signup': typeof ApiSignupRoute;
  '/api/trigger': typeof ApiTriggerRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/api/hook' | '/api/signup' | '/api/trigger';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/api/hook' | '/api/signup' | '/api/trigger';
  id: '__root__' | '/' | '/api/hook' | '/api/signup' | '/api/trigger';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  ApiHookRoute: typeof ApiHookRoute;
  ApiSignupRoute: typeof ApiSignupRoute;
  ApiTriggerRoute: typeof ApiTriggerRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/api/trigger': {
      id: '/api/trigger';
      path: '/api/trigger';
      fullPath: '/api/trigger';
      preLoaderRoute: typeof ApiTriggerRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/api/signup': {
      id: '/api/signup';
      path: '/api/signup';
      fullPath: '/api/signup';
      preLoaderRoute: typeof ApiSignupRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/api/hook': {
      id: '/api/hook';
      path: '/api/hook';
      fullPath: '/api/hook';
      preLoaderRoute: typeof ApiHookRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApiHookRoute: ApiHookRoute,
  ApiSignupRoute: ApiSignupRoute,
  ApiTriggerRoute: ApiTriggerRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

import type { getRouter } from './router.tsx';
import type { createStart } from '@tanstack/react-start';
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true;
    router: Awaited<ReturnType<typeof getRouter>>;
  }
}
